package com.daobao.asus.greendaodemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Number = new Property(1, String.class, "number", false, "NUMBER");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Nick_name = new Property(3, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Sex = new Property(4, int.class, "sex", false, "SEX");
        public final static Property Height = new Property(5, float.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(6, float.class, "weight", false, "WEIGHT");
        public final static Property Birthday = new Property(7, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Photo_link = new Property(8, String.class, "photo_link", false, "PHOTO_LINK");
        public final static Property Sport_goal = new Property(9, int.class, "sport_goal", false, "SPORT_GOAL");
        public final static Property Summarize = new Property(10, String.class, "summarize", false, "SUMMARIZE");
    }

    private DaoSession daoSession;


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NUMBER\" TEXT," + // 1: number
                "\"PASSWORD\" TEXT," + // 2: password
                "\"NICK_NAME\" TEXT," + // 3: nick_name
                "\"SEX\" INTEGER NOT NULL ," + // 4: sex
                "\"HEIGHT\" REAL NOT NULL ," + // 5: height
                "\"WEIGHT\" REAL NOT NULL ," + // 6: weight
                "\"BIRTHDAY\" TEXT," + // 7: birthday
                "\"PHOTO_LINK\" TEXT," + // 8: photo_link
                "\"SPORT_GOAL\" INTEGER NOT NULL ," + // 9: sport_goal
                "\"SUMMARIZE\" TEXT);"); // 10: summarize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(4, nick_name);
        }
        stmt.bindLong(5, entity.getSex());
        stmt.bindDouble(6, entity.getHeight());
        stmt.bindDouble(7, entity.getWeight());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
 
        String photo_link = entity.getPhoto_link();
        if (photo_link != null) {
            stmt.bindString(9, photo_link);
        }
        stmt.bindLong(10, entity.getSport_goal());
 
        String summarize = entity.getSummarize();
        if (summarize != null) {
            stmt.bindString(11, summarize);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(4, nick_name);
        }
        stmt.bindLong(5, entity.getSex());
        stmt.bindDouble(6, entity.getHeight());
        stmt.bindDouble(7, entity.getWeight());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
 
        String photo_link = entity.getPhoto_link();
        if (photo_link != null) {
            stmt.bindString(9, photo_link);
        }
        stmt.bindLong(10, entity.getSport_goal());
 
        String summarize = entity.getSummarize();
        if (summarize != null) {
            stmt.bindString(11, summarize);
        }
    }

    @Override
    protected final void attachEntity(UserInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nick_name
            cursor.getInt(offset + 4), // sex
            cursor.getFloat(offset + 5), // height
            cursor.getFloat(offset + 6), // weight
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // photo_link
            cursor.getInt(offset + 9), // sport_goal
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // summarize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNick_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.getInt(offset + 4));
        entity.setHeight(cursor.getFloat(offset + 5));
        entity.setWeight(cursor.getFloat(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhoto_link(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSport_goal(cursor.getInt(offset + 9));
        entity.setSummarize(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
